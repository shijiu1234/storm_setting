<templateSet group="react">
  <template name="ctor" value="constructor(props){&#10;    super(props);&#10;    $END$&#10;}" description="React constructor" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ccom" value="import React from 'react';&#10;&#10;class $className$ extends React.Component {&#10;    render() {&#10;        return (&#10;            &lt;div&gt;&#10;                $END$&#10;            &lt;/div&gt;&#10;        )&#10;    }&#10;}&#10;&#10;$className$.propTypes = {&#10;    &#10;}&#10;&#10;export default $className$;" description="Class Component" toReformat="true" toShortenFQNames="true">
    <variable name="className" expression="" defaultValue="clipboard()" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fcom" value="import React from 'react';&#10;&#10;const $componentName$ = () =&gt; {&#10;    return (&#10;        &lt;div&gt;&#10;            $END$&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;&#10;export default $componentName$;" description="Function Component" toReformat="true" toShortenFQNames="true">
    <variable name="componentName" expression="" defaultValue="clipboard()" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="bindthis" value="this.$funcName$ = this.$funcName$.bind(this);&#10;$END$" description="bind this to function" toReformat="false" toShortenFQNames="true">
    <variable name="funcName" expression="" defaultValue="clipboard()" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="eventHandler" value="$funcName$(e){&#10;    e.preventDefault();&#10;    $END$&#10;}&#10;&#10;" description="React event handler" toReformat="false" toShortenFQNames="true">
    <variable name="funcName" expression="" defaultValue="clipboard()" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="setState" value="setState({ $END$ });" description="React setState" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="validator" value="import Validator from 'validator';&#10;import isEmpty from 'lodash/isEmpty';&#10;&#10;export default function validateInput(data) {&#10;    let errors = {};&#10;&#10;    if (Validator.isEmpty(data.$fieldName$)) {&#10;        errors.$fieldName$ = 'This field is required';&#10;    }&#10;    $END$&#10;&#10;    return {&#10;        errors,&#10;        isValid: isEmpty(errors)&#10;    }&#10;}&#10;" description="Server side validator" toReformat="true" toShortenFQNames="true">
    <variable name="fieldName" expression="" defaultValue="&quot;fieldName&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="imf" value="import $module$ from '$module2$';" description="React import from" toReformat="false" toShortenFQNames="true">
    <variable name="module" expression="" defaultValue="clipboard()" alwaysStopAt="true" />
    <variable name="module2" expression="" defaultValue="module" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ic" value="import {connect} from 'react-redux';&#10;$END$" description="import connect from react-redux" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="propTypes" value="$propName$: React.PropTypes.$propType$.$isRequired$," description="" toReformat="false" toShortenFQNames="true">
    <variable name="propName" expression="" defaultValue="&quot;propName&quot;" alwaysStopAt="true" />
    <variable name="propType" expression="" defaultValue="&quot;func&quot;" alwaysStopAt="true" />
    <variable name="isRequired" expression="" defaultValue="&quot;isRequired&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="asyncAction" value="export function $actionName$($paramName$) {&#10;    return dispatch =&gt; {&#10;        return axios.$post$('/$route$', $paramName$)&#10;    }&#10;}" description="Asynchronous action use axios" toReformat="false" toShortenFQNames="true">
    <variable name="actionName" expression="" defaultValue="clipboard()" alwaysStopAt="true" />
    <variable name="paramName" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
    <variable name="post" expression="" defaultValue="&quot;post&quot;" alwaysStopAt="true" />
    <variable name="route" expression="" defaultValue="&quot;route&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="express_route" value="router.post('/', (req, res) =&gt; {&#10;    $END$&#10;});    &#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="fetch" value="fetch().then($data$=&gt;{&#10;    $END$    &#10;})" description="" toReformat="false" toShortenFQNames="true">
    <variable name="data" expression="" defaultValue="&quot;data&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="reducer" value="export default (state, action = {}) =&gt; {&#10;    switch(action.type) {&#10;        default: return state;&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="edf" value="export default function $functionName$($param$) {&#10;    $END$&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="functionName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="param" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="epic" value="export default function $functionName$(action$) {&#10;    return action$.ofType();&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="functionName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>